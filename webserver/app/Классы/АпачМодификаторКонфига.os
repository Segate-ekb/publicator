#Использовать json
&Пластилин Перем ШаблоныФайловКонфига;
&Пластилин Перем ФайловыеОперации;
&Пластилин Перем НастройкиПубликатора;
&ЛогПубликатора Перем Лог;



&Желудь
Процедура ПриСозданииОбъекта()
КонецПроцедуры

Процедура ПервоначальныеНастройкиАпач() Экспорт
	Лог.Отладка("Приступаем к инициализации первоначальных настроек Апач");
	
	Лог.Отладка("Проверим наличие подключения нашего блока в текущей конфигурации апач");
	ДобавляемаяСтрока = СтрШаблон("Include conf/1C/base_onec_implment.conf");

	ПутьКhttpdConf = ОбъединитьПути(НастройкиПубликатора.КаталогАпач,"conf", "httpd.conf");
	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ПутьКhttpdConf);

	Если СтрНайти(СодержимоеФайла, ДобавляемаяСтрока) = 0 Тогда
		Лог.Отладка("Не найдено упоминание конфига 1с в файле конфигурации, добавим");
		СодержимоеФайла = СодержимоеФайла+Символы.ПС+ДобавляемаяСтрока;
		ФайловыеОперации.ЗаписатьТекстФайла(ПутьКhttpdConf, СодержимоеФайла);
	КонецЕсли;
КонецПроцедуры

Процедура Опубликовать(Описание) Экспорт
	Лог.Информация("Приступаем к публикации");
	СоздатьОбновитьbase_onec_implment();

	ОпубликоватьБазы(Описание);
	ОпубликоватьСервераХранилища(Описание);

КонецПроцедуры

Процедура ОпубликоватьБазы(Описание)
	Лог.Информация("Приступаем к публикации баз");
	// Публикуем базы
	Если не Описание.Свойство("bases") Тогда
		Лог.Информация("Не задано ни одной базы для публикации.");
		Возврат;
	КонецЕсли;
	Для каждого ОписаниеБазы Из Описание.bases Цикл
		ОпубликоватьБазу(ОписаниеБазы);
	КонецЦикла;
КонецПроцедуры

Процедура ОпубликоватьСервераХранилища(Описание)
	Лог.Информация("Приступаем к публикации серверов хранилища");

	Если не Описание.Свойство("crs") Тогда
		Лог.Информация("Не задано ни одного сервера хранилища для публикации.");
		Возврат;
	КонецЕсли;

	Для каждого ОписаниеСервера Из Описание.crs Цикл
		ОпубликоватьСерверХранилища(ОписаниеСервера);
	КонецЦикла;
КонецПроцедуры

Процедура ОпубликоватьБазу(СтруктураБазыДляПубликации) Экспорт
	СтрокаПодключенияКБД = СтрШаблон("Srvr=%1;Ref=%2;", 
										СтруктураБазыДляПубликации.Srvr, 
										СтруктураБазыДляПубликации.Ref);
	Лог.Информация("Обрабатываем базу ""%1""", СтрокаПодключенияКБД);

	Если не СтруктураБазыДляПубликации.Свойство("publications") Тогда
		Лог.Информация("Не задано ни публикации для базы %1", СтрокаПодключенияКБД);
		Возврат;
	КонецЕсли;
										
	Для каждого Публикация Из СтруктураБазыДляПубликации.publications Цикл
		Лог.Информация("Обрабатываем публикацию ""%1""", Публикация.title);
		Если Публикация.Свойство("active") и не Публикация.active Тогда
			Лог.Отладка("Публикация %1 с location %2 отключена и не публикуется.", Публикация.title, Публикация.name);
			Возврат;
		КонецЕсли;	
		
		СоздатьDefaultVrd(Публикация, СтрокаПодключенияКБД);
		СоздатьКонфигПубликацииБазы(Публикация.name);
	КонецЦикла;									
КонецПроцедуры

Процедура ОпубликоватьСерверХранилища(ОписаниеСервера)
	Лог.Информация("Обрабатываем сервер хранилища ""%1""", ОписаниеСервера.title);
	Если ОписаниеСервера.Свойство("active") и не ОписаниеСервера.active Тогда
		Лог.Отладка("Публикация сервера %1 с location %2 отключена и не публикуется.", ОписаниеСервера.title, ОписаниеСервера.name);
		Возврат;
	КонецЕсли;	

	Создатьrepo(ОписаниеСервера);
	СоздатьКонфигПубликацииСервераХранилища(ОписаниеСервера.name);
КонецПроцедуры

Процедура СоздатьОбновитьbase_onec_implment()
	Лог.Отладка("Проверим существование base_onec_implment.conf в текущей конфигурации апач");

	ПутьККонфигу = ОбъединитьПути(НастройкиПубликатора.КаталогАпач,"conf","1C", "base_onec_implment.conf");

		Лог.Отладка("Не найдено конфига 1с base_onec_implment.conf добавим его");
		СоздатьКаталог(ОбъединитьПути(НастройкиПубликатора.КаталогАпач,"conf","1C"));
		ИмяМодуля = ?(НастройкиПубликатора.ЭтоLinux, "wsap24.so", "wsap24.dll");
		ПутьКМодулю = ОбъединитьПути(НастройкиПубликатора.ПутьК1С, ИмяМодуля);

		ШаблонКонфига = ШаблоныФайловКонфига.base_onec_config();
		СодержимоеФайла = СтрШаблон(ШаблонКонфига, ПутьКМодулю);

		ФайловыеОперации.ЗаписатьТекстФайла(ПутьККонфигу, СодержимоеФайла);

КонецПроцедуры

Процедура СоздатьDefaultVrd(Публикация, СтрокаПодключенияКБД)
	Лог.Отладка("Приступаем к созданию vrd файла");
	
	ДобавитьИнформациюОПользователеВСтрокуПодключенияКБД(СтрокаПодключенияКБД, Публикация);

	РазрешитьЛогин = ПолучитьСтрокуРазрешитьЛогин(Публикация);
	ТекстСекцииWs = ЗаполнитьТекстСекцииWS(Публикация);
	ТекстСекцииHs = ЗаполнитьТекстСекцииhttpServices(Публикация);
	ТекстСекцииOIDC = ЗаполнитьТекстOIDC(Публикация);


	ШаблонVrd = ШаблоныФайловКонфига.defaultVrd();
	ТекстVrd = СтрШаблон(ШаблонVrd, 
						Публикация.name,
						СтрокаПодключенияКБД,
						РазрешитьЛогин,
						ТекстСекцииWs,
						ТекстСекцииHs,
						ТекстСекцииOIDC);	
	ИмяКаталога = "/"+ОбъединитьПути(НастройкиПубликатора.КаталогПубликаций, Публикация.name);				
	СоздатьКаталог(ИмяКаталога);
	ПутьКФайлу = "/"+ОбъединитьПути(ИмяКаталога, "default.vrd");							
	ФайловыеОперации.ЗаписатьТекстФайла(ПутьКФайлу, ТекстVrd);
	Лог.Информация("Создан vrd файл публикации. Путь к файлу: %1", ПутьКФайлу);

КонецПроцедуры

Процедура Создатьrepo(ОписаниеСервера)
	Лог.Отладка("Приступаем к созданию 1ccr файла");
	Шаблонrepo = ШаблоныФайловКонфига.crsPublication();
	Текстrepo = СтрШаблон(Шаблонrepo, ОписаниеСервера.tcpAddress);
	
	ИмяКаталога = "/"+ОбъединитьПути(НастройкиПубликатора.КаталогПубликаций, ОписаниеСервера.name);				
	СоздатьКаталог(ИмяКаталога);
	ПутьКФайлу = "/"+ОбъединитьПути(ИмяКаталога, "repo.1ccr");							
	ФайловыеОперации.ЗаписатьТекстФайла(ПутьКФайлу, Текстrepo);
	Лог.Информация("Создан 1ccr файл публикации. Путь к файлу: %1", ПутьКФайлу);
КонецПроцедуры

Процедура СоздатьКонфигПубликацииБазы(ИмяПубликации)
	Лог.Отладка("Приступаем к созданию conf файла");
	КаталогПубликации = ОбъединитьПути(НастройкиПубликатора.КаталогПубликаций, ИмяПубликации);
	ПутьКDefaultVrd = ОбъединитьПути(КаталогПубликации, "default.vrd");
	ТекстКонфига = СтрШаблон(ШаблоныФайловКонфига.КонфигПубликации(), ИмяПубликации, КаталогПубликации, ПутьКDefaultVrd);

	ИмяФайла = СтрШаблон("%1.conf", ИмяПубликации);
	ОтносительныйКусокПути = ОбъединитьПути("conf","1C");
	ПутьКФайлу = ОбъединитьПути(НастройкиПубликатора.КаталогАпач, ОтносительныйКусокПути,ИмяФайла);
	
	ФайловыеОперации.ЗаписатьТекстФайла(ПутьКФайлу, ТекстКонфига);
	Лог.Информация("Создан conf файл публикации. Путь к файлу: %1", ПутьКФайлу);

	ДобавитьЗаписьBase_onec_implement(ОтносительныйКусокПути, ИмяФайла);
КонецПроцедуры

Процедура СоздатьКонфигПубликацииСервераХранилища(ИмяПубликации)
	Лог.Отладка("Приступаем к созданию conf файла");
	КаталогПубликации = ОбъединитьПути(НастройкиПубликатора.КаталогПубликаций, ИмяПубликации);
	ПутьКrepo= ОбъединитьПути(КаталогПубликации, "repo.1ccr");
	ТекстКонфига = СтрШаблон(ШаблоныФайловКонфига.КонфигПубликацииСервераХранилища(), ИмяПубликации, КаталогПубликации, ПутьКrepo);

	ИмяФайла = СтрШаблон("%1.conf", ИмяПубликации);
	ОтносительныйКусокПути = ОбъединитьПути("conf","1C");
	ПутьКФайлу = ОбъединитьПути(НастройкиПубликатора.КаталогАпач, ОтносительныйКусокПути,ИмяФайла);
	
	ФайловыеОперации.ЗаписатьТекстФайла(ПутьКФайлу, ТекстКонфига);
	Лог.Информация("Создан conf файл публикации. Путь к файлу: %1", ПутьКФайлу);

	ДобавитьЗаписьBase_onec_implement(ОтносительныйКусокПути, ИмяФайла);
КонецПроцедуры

Процедура ДобавитьЗаписьBase_onec_implement(ОтносительныйКусокПути, ИмяФайла)
	Лог.Отладка("Приступаем к модификации файла со списком конфигураций");

	ДобавляемаяСтрока = СтрШаблон("include %1/%2", ОтносительныйКусокПути ,ИмяФайла);

	ПутьККонфигу = ОбъединитьПути(НастройкиПубликатора.КаталогАпач, ОтносительныйКусокПути, "base_onec_implment.conf");
	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ПутьККонфигу);

	Если СтрНайти(СодержимоеФайла, ДобавляемаяСтрока) = 0 Тогда
		СодержимоеФайла = СодержимоеФайла+Символы.ПС+ДобавляемаяСтрока;
		ФайловыеОперации.ЗаписатьТекстФайла(ПутьККонфигу, СодержимоеФайла);
	КонецЕсли;
	
	Лог.Информация("Информация о публикации %1 успешно добавлена в %2", ИмяФайла, ПутьККонфигу);
КонецПроцедуры

Функция ПолучитьСтрокуРазрешитьЛогин(Публикация)
	Лог.Отладка("Обработка свойства enable");
	РазрешитьЛогин = "";
	Если Публикация.Свойство("enable") Тогда
		Лог.Отладка("Нашли свойство в конфигурации. добавим его в описание");														
		РазрешитьЛогин = СтрШаблон("enable=""%1""", Формат(Публикация.enable, "БЛ=false; БИ=true"));
	Иначе
		Лог.Отладка("Нет свойства в описании. Пропускаем.");	
	КонецЕсли;	

	Возврат РазрешитьЛогин;
КонецФункции

Процедура ДобавитьИнформациюОПользователеВСтрокуПодключенияКБД(СтрокаПодключенияКБД, Публикация)
	Лог.Отладка("Добавим информацию о пользователе для авторизаци, если она есть");
	Если Публикация.Свойство("Usr") и ЗначениеЗаполнено(Публикация.Usr) Тогда
		Лог.Отладка("Найдена инфррмация о пользователе для авторизации. Дополним строку подключения к БД");
		СтрокаПодключенияКБД = СтрокаПодключенияКБД+
								СтрШаблон("Usr=%1;Pwd=%2;", 
											Публикация.Usr,
											?(Публикация.Свойство("Pwd"), Публикация.Pwd, ""));
	Иначе
		Лог.Отладка("Нет информации о пользователе. Пропускаем.");											
	КонецЕсли;
КонецПроцедуры

Функция ЗаполнитьТекстСекцииWS(Публикация)
	Лог.Отладка("Заполним секуцию ws");
	ТекстWS = "";
	Если Публикация.Свойство("ws") Тогда
		Лог.Отладка("У нас есть описание блока ws");

		ТекстPublishExtensionsByDefault = "";
		Если Публикация.ws.Свойство("publishExtensionsByDefault") Тогда
			Лог.Отладка("Нашли свойство publishExtensionsByDefault добавим его в конфигурацию");
			ТекстPublishExtensionsByDefault = СтрШаблон(" publishExtensionsByDefault=""%1"" ", Формат(Публикация.ws.publishExtensionsByDefault, "БЛ=false; БИ=true"));
		КонецЕсли;

		Если Публикация.ws.Свойство("wsList") и Публикация.ws.wslist.количество() > 0 Тогда
			Лог.Отладка("У нас есть описание конкретных сервисов");
			ШаблонWS = "<ws%1>%2</ws>";

			ОписаниеПоинтов = ПолучитьОписаниеPoint(Публикация.ws.wslist);

			ТекстWS = СтрШаблон(ШаблонWS, 
									ТекстPublishExtensionsByDefault,
									ОписаниеПоинтов);
		Иначе
			ШаблонWS = "<ws%1/>";
			ТекстWS = СтрШаблон(ШаблонWS, 
									ТекстPublishExtensionsByDefault);							
		КонецЕсли;
	КонецЕсли;
	
	

	Возврат ТекстWS;
КонецФункции

Функция ПолучитьОписаниеPoint(МассивПоинтов)
	Лог.Отладка("Соберем описание сервисов");
	ОписаниеПоинтов = "";
	ШаблонПоинта = ШаблоныФайловКонфига.СекцияPoint();
	Для каждого Сервис Из МассивПоинтов Цикл
		Лог.Отладка("Обрабатываем поинт %1", Сервис.name);
		ТекстПоинта = СтрШаблон(ШаблонПоинта, 
									Сервис.name,
									Сервис.alias,
									Формат(Сервис.enable, "БЛ=false; БИ=true"),,
									Сервис.reuseSessions,
									Сервис.sessionMaxAge,
									Сервис.poolSize,
									Сервис.poolTimeout);
		ОписаниеПоинтов = ОписаниеПоинтов + Символы.ПС + ТекстПоинта;		
	КонецЦикла;
	
	Возврат ОписаниеПоинтов;
КонецФункции

Функция ЗаполнитьТекстСекцииhttpServices(Публикация)
	Лог.Отладка("Заполним секуцию httpServices");
	httpServices = "";
	Если Публикация.Свойство("httpServices") Тогда
		Лог.Отладка("У нас есть описание блока httpServices");

		ТекстPublishExtensionsByDefault = "";
		Если Публикация.httpServices.Свойство("publishExtensionsByDefault") Тогда
			Лог.Отладка("Нашли свойство publishExtensionsByDefault добавим его в конфигурацию");
			ТекстPublishExtensionsByDefault = СтрШаблон(" publishExtensionsByDefault=""%1"" ", Формат(Публикация.httpServices.publishExtensionsByDefault, "БЛ=false; БИ=true"));
		КонецЕсли;

		ТекстpublishByDefault = "";
		Если Публикация.httpServices.Свойство("publishByDefault") Тогда
			Лог.Отладка("Нашли свойство publishByDefault добавим его в конфигурацию");
			ТекстpublishByDefault = СтрШаблон(" publishByDefault=""%1"" ", Формат(Публикация.httpServices.publishByDefault, "БЛ=false; БИ=true"));
		КонецЕсли;

		Если Публикация.httpServices.Свойство("hsList") и Публикация.httpServices.hsList.количество() > 0 Тогда
			Лог.Отладка("У нас есть описание конкретных сервисов");
			ШаблонWS = "<httpServices%1%2>%3</httpServices>";

			ОписаниеСервисов = ПолучитьОписаниеService(Публикация.httpServices.hsList);

			httpServices = СтрШаблон(ШаблонWS,
									ТекстpublishByDefault, 
									ТекстPublishExtensionsByDefault,
									ОписаниеСервисов);
		Иначе
			ШаблонWS = "<httpServices%1%2/>";
			httpServices = СтрШаблон(ШаблонWS,
									ТекстpublishByDefault,
									ТекстPublishExtensionsByDefault);							
		КонецЕсли;
	КонецЕсли;
	
	

	Возврат httpServices;
КонецФункции

Функция ПолучитьОписаниеService(МассивСервисов)
	Лог.Отладка("Соберем описание сервисов");
	ОписаниеСервисов = "";
	ШаблонСервиса = ШаблоныФайловКонфига.СекцияService();
	Для каждого Сервис Из МассивСервисов Цикл
		Лог.Отладка("Обрабатываем сервис %1", Сервис.name);
		ТекстПоинта = СтрШаблон(ШаблонСервиса, 
									Сервис.name,
									Сервис.rootUrl,
									Формат(Сервис.enable, "БЛ=false; БИ=true"),
									Сервис.reuseSessions,
									Сервис.sessionMaxAge,
									Сервис.poolSize,
									Сервис.poolTimeout);
		ОписаниеСервисов = ОписаниеСервисов + Символы.ПС + ТекстПоинта;		
	КонецЦикла;
	
	Возврат ОписаниеСервисов;
КонецФункции

Функция ЗаполнитьТекстOIDC(Публикация)
	Лог.Отладка("Заполним секуцию oidc");
	ТекстOIDC = "";
	Если Публикация.Свойство("oidc") и  Публикация.oidc.Свойство("providers") и Публикация.oidc.providers.количество() > 0 Тогда
		ПарсерJSON = Новый ПарсерJSON;
		СекцияПровайдеры = ПарсерJSON.ЗаписатьJSON(Публикация.oidc.providers);
		ТекстРазрешитьСтандартнуюАутентификацию = "";
		Если Публикация.oidc.Свойство("allowStandardAuthentication") Тогда
			ТекстРазрешитьСтандартнуюАутентификацию = СтрШаблон("<allowStandardAuthentication>%1</allowStandardAuthentication>", Формат(Публикация.oidc.allowStandardAuthentication, "БЛ=false; БИ=true"));
		КонецЕсли;
		
		ШаблонOidc = ШаблоныФайловКонфига.oidc();
		ТекстOIDC = СтрШаблон(ШаблонOidc, СекцияПровайдеры, ТекстРазрешитьСтандартнуюАутентификацию);
	КонецЕсли;
	
	Возврат ТекстOIDC;
КонецФункции